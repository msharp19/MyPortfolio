@model PortfolioSite.Models.BlogItemModel

@{
    ViewBag.Title = "NeuralNetwork";
}

@Scripts.Render("~/Scripts/js/jquery.min.js")
@Html.Hidden("BlogPostName", Model.BlogPost.ToString())
<main role="main-inner-wrapper" class="container">
    <div class="blog-details">
        <article class="post-details" id="post-details">
            <header role="bog-header" class="bog-header text-center">
                <h3><span>19</span> November 2018</h3>
                <h2>
                    A guide in how to work with Neural networks in C# and a working example.
                </h2>
                <a class="proj-url" href="https://github.com/msharp19/MyPortfolio/tree/master/PortfolioSite/ANN">Git URL<i class="fa fa-external-link" aria-hidden="true"></i></a>
            </header>
            <figure>
                <a href="../images/blog-main-images/network.jpg">
                    <img src="../images/blog-main-images/network.jpg" alt="" class="img-responsive" />
                </a>
            </figure>
            <div class="enter-content">
                <p>Everyone is talking about AI, but what is it? On a basic level our brains have a set of connected neurons (essentially nodes) connected in some weird and wonderful ways (not linearly). Neurons are essentially just units that take an input and give an output (fire or not) based on the given stimuli, a yes or a no. These nodes are then connected to each other and paths are formed or lit up based on certain stimuli (each node is still working idependantly).</p>
                <p>ANNs (artificial neural networks) have been modelled on the way that our brain works to a degree (a simplified version). As can be seen in the diagram below we have 3 layers of neurons (3 for simplicity but can have many more). We have a input layer which is essentially the data being inputted, the number of nodes correspond to the field count (data) you are training the model with - a 1:1 relationship. The next layer in the diagram is the hidden layer in the center. It is connected in lots of ways to both the input and output nodes. The hidden nodes act like the neurons on the brain firing and not firing based on the input stimuli. The ability to fire is encoded in the hidden weighting that the neuron possesses and on a type of activation function that the neron follows (defined at setup). Finally we have an output layer which is essentially the prediction, each node corresponds to a real world value. When the model is setup, the nodes will be assigned some random weights and paths random biases. Once we start training the model these weights get updated as data is propegated through the network. We use the stochastic gradient descent optimization algorithm to adjust the weight of neurons by calculating the gradient of the loss function. Once we have sufficiently trained a the model, you can pass data through the network and the model will fire certain output neurons - your prediction.</p>
                <figure class="intext-padding">
                    <a href="../images/blog-main-images/nn-diagram.png">
                        <img src="../images/blog-main-images/nn-diagram.png" alt="" class="img-responsive auto-margin" />
                    </a>
                </figure>
                <p>To train a network we need data, not only that but we need normalized data in the form of a decimal (between 0-1). The output will be in this same format, this can be used as a confidence (%). In the following section we will see how to format data so we are able to propegate it through a network.</p>
                <p>Now we have gone over the basics, i am going to show you a real world example using C#. We will use the Encog Nuget package for this example: <a href="https://www.heatonresearch.com/encog/">Encog</a></p>
                <p>Below is some data to train the model with (raw)</p>
                @Html.Partial("_NeuralNetworkDataMethod")
                <p>The data needs to be formatted and between 0-1. Below we take all the distinct values for weather and turn them into columns. If the row has the value that corresponds to a column, the value will be 1 otherwise it will be zero. For the temp.</p>
                @Html.Partial("_NeuralNetworkFormatMethod")
                <p>We need to create a network with input nodes, hidden nodes and output nodes.</p>
                @Html.Partial("_NeuralNetworkNetworkMethod")
                <p>Onces the model is complete we train it with the formatted data.</p>
                @Html.Partial("_NeuralNetworkTrainMethod")
                <p>Once the model has been sufficently trained, we can put data through it to run predictions with the method below</p>
                @Html.Partial("_NeuralNetworkTestMethod")
                <p>Below is the method that combines all of above.</p>
                @Html.Partial("_NeuralNetworkRunMethod")
                <p>Try the code for yourself:</p>
            </div>
            <div class="model-container">
                <div id="output">
                    <span>Model Output</span>
                    <span class="output-text"></span>
                </div>
                <div class="text-center">
                    <input name="" id="run-model" class="std-button" type="button" value="Run Model">
                </div>
            </div>
        </article>
        @Html.Partial("_Comments", Model.CommentModel)
    </div>
</main>


<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/styles/default.min.css">
@Styles.Render("~/Content/toastr.css")

<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/highlight.min.js"></script>
<script>
    var connectionId = "";
    var outputMessage = "</br>";
    var batch = 0;
    hljs.initHighlightingOnLoad();
</script>
@section scripts {
    @Scripts.Render("~/Scripts/jquery.signalR-2.4.0.min.js")
    <script src="/signalr/hubs" type="text/javascript"></script>
    @Scripts.Render("~/Scripts/js/toastr.min.js")
    @Scripts.Render("~/Scripts/messaging.js")
    @Scripts.Render("~/Scripts/ann-blog-post.js")
    @Scripts.Render("~/Scripts/code-block.js")
    @Scripts.Render("~/Scripts/comments.js")
}

@Scripts.Render("~/Scripts/ann.js")