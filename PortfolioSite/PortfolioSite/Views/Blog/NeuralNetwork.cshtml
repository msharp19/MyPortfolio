@model PortfolioSite.Models.BlogItemModel
@using ANN;

@{
    ViewBag.Title = "NeuralNetwork";
}

@Scripts.Render("~/Scripts/jquery-1.10.2.min.js")
@Html.Hidden("BlogPostName", Model.BlogPost.ToString())
<main role="main-inner-wrapper" class="container">
    <div class="blog-details">
        <article class="post-details" id="post-details">
            <header role="bog-header" class="bog-header text-center">
                <h3><span>19</span> November 2018</h3>
                <h2>
                    A guide in how to work with Neural networks in C# and a working example.
                </h2>
                <a class="proj-url" href="https://github.com/msharp19/MyPortfolio/tree/master/PortfolioSite/ANN">Git URL<i class="fa fa-external-link" aria-hidden="true"></i></a>
            </header>
            <figure>
                <a href="../images/blog-main-images/network.jpg">
                    <img src="../images/blog-main-images/network.jpg" alt="" class="img-responsive" />
                </a>
            </figure>
            <div class="enter-content">
                <h2>Introduction</h2>
                <p>
                    Neural networks are systems made up of a number of simple, highly interconnected processing elements which process information idependantly in response to external inputs. Artifical neural networks have been created loosly modelled on the brain, loosely because brains are connected in much more exotic ways and with a lot more "neurons" - the processing elements. An animal brain typically consists of billions of neurons while our modelled networks maybe consist of 1-thousends which is significantly less. The sheer number of neurons in the brain capture emerging behaviour much better than our computer counter-parts.
                </p>
                <h2>Network</h2>
                <p>
                    ANNs are made up of a number of nodes connected in layers. As can be seen in the diagram, we have at least 3 layers to a network, the input layer which has a count of the number of values going into the network, the hidden layers in the middle which is highly connected to both the input and output layer and finally the output layer which is a count of the total possible outputs - yes or no would be 1 output node where 0 represented no and 1 represented yes. The input and output layers work better when the value has been normalized - is between 0 & 1). It is possible to have any amount of hidden layers between the input and the output, in the diagram we have 1 layer, with additional layers (and additional neurons) there will be an increase in time taken to traverse the network. The hidden layers are where the actual processing in the network is done. The hidden layer acts as a black box to us the user as we do not get to see the values held by each neuron and the patterns they fire in, we only see the output nodes fired based on inputs.
                </p>
                <figure class="intext-padding">
                    <a href="../images/blog-main-images/nn-diagram.png">
                        <img src="../images/blog-main-images/nn-diagram.png" alt="" class="img-responsive auto-margin" />
                    </a>
                </figure>
                <h2>Data</h2>
                <p>
                    The data entering a neural network via the input layer needs to be in a correct format to help with accuracy, we cannot just give it full strings. As said above we want to normalize the data by putting it between 0 and 1. If a column of data has string data, we can expand that one column out to the distinct count possible string values found in that column. Then for each row, the new set of columns will be marked with 0 & 1 respective to the string value held in the original column.
                </p>
                <h2>Train/Test</h2>
                <p>
                    The trainer for the network contains a set of rules that when presented with complex inputs, it traverses across the network and updates the weights on the hidden layer/s neurons connections. The patterns in the inputs get recorded in the weightings and are essentially remebered, this is process is usually back propagation (performing gradient descent). Our example below is using resilient propagation which is compared to back propegation <a class="inline-block" href="https://ieeexplore.ieee.org/document/6663160">here</a>. When updating these weightings the network makes a guess of what it thinks is the correct output and is then compares it to the true result, ajustments are made based on this to try to line up the differences.
                </p>
                <p>
                    Each neuron has an activation function which helps stabalize the propagation, you can set the neurons with a number of different activation functions better explained <a class="inline-block href="https://towardsdatascience.com/activation-functions-and-its-types-which-is-better-a9a5310cc8f">here</a>.
                </p>
                <p>
                    Once a network has been trained to a sufficiant level, predictions can be made. The act of testing a network is done with forward propagation which means that the weightings will not be updated by showing it new input patterns but will travel through the network and give an output reading. This output reading is in the form of an array of confidences, all of the possible outputs with a 0-1 value assigned to it.
                </p>
                <h2>Working Example</h2>
                <p>Below is some data to train the model with (raw). I recreated a dataset that i saw used as an exmaple a while ago, the gist of it is when its over a certain temparature and not raining or if its snowing and its cold enough, the output will be to play. The two known columns are "temparature" and "weather description" and the output column is "plays outside or not"</p>
                @Html.Partial("_NeuralNetworkDataMethod")
                <figure class="intext-padding table-pad">
                    <p class="text-center">Below is the data put into a table (a bit more human read-able) pre-formatting.</p>
                    <table id="table" class="table table-hover table-mc-light-blue nn-table">
                        <thead>
                            <tr>
                                <th>Majority Weather</th>
                                <th>Temperature (C)</th>
                                <th>Plays Outside</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var inputData = NetworkFactory.GetInputData();
                                var ideals = NetworkFactory.GetIdealValues();
                                for (int i = 0; i < inputData.Count(); i++)
                                {
                                    <tr>
                                        <td data-title="Majority Weather">@inputData[i][0]</td>
                                        <td data-title="Temperature (C)">@inputData[i][1]</td>
                                        <td data-title="Plays Outside">@ideals[i][0]</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </figure>
                <p>The data needs to be formatted and between 0-1. Below we take all the distinct values for weather and turn them into columns. If the row has the value that corresponds to a column, the value will be 1 otherwise it will be zero. For the temp.</p>
                @Html.Partial("_NeuralNetworkFormatMethod")
                <figure class="intext-padding table-pad">
                    <p class="text-center">Below is the data put into a table post-formatting.</p>
                    <table id="table" class="table table-hover table-mc-light-blue nn-table">
                        <thead>
                            <tr>
                                <th>Rain</th>
                                <th>Wind</th>
                                <th>Sun</th>
                                <th>Overcast</th>
                                <th>Snow</th>
                                <th>Temperature</th>
                                <th>Plays Outside</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var inputDataPost = NetworkFactory.FormatInputValues(NetworkFactory.GetInputData());
                                var idealsPost = NetworkFactory.GetIdealValues();
                                for (int i = 0; i < inputDataPost.Count(); i++)
                                {
                                    <tr>
                                        <td data-title="Rain">@inputDataPost[i][0]</td>
                                        <td data-title="Wind">@inputDataPost[i][1]</td>
                                        <td data-title="Sun">@inputDataPost[i][2]</td>
                                        <td data-title="Overcast">@inputDataPost[i][3]</td>
                                        <td data-title="Snow">@inputDataPost[i][4]</td>
                                        <td data-title="Temperature (C)">@Math.Round(inputDataPost[i][5], 2).ToString()</td>
                                        <td data-title="Plays Outside">@idealsPost[i][0]</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </figure>
                <p>We need to create a network with input nodes, hidden nodes and output nodes.</p>
                @Html.Partial("_NeuralNetworkNetworkMethod")
                <p>Onces the model is complete we train it with the formatted data.</p>
                @Html.Partial("_NeuralNetworkTrainMethod")
                <p>Once the model has been sufficently trained, we can put data through it to run predictions with the method below</p>
                @Html.Partial("_NeuralNetworkTestMethod")
                <p>Below is the method that combines all of above.</p>
                @Html.Partial("_NeuralNetworkRunMethod")
            </div>
            <figure class="intext-padding table-pad">
                <p>To save on processing power my end, I am only training to max 20,000 iterations. You can run the model below - the code for this (all of above) can be found <a href="https://github.com/msharp19/MyPortfolio/blob/master/PortfolioSite/ANN/NetworkFactory.cs">here</a>.</p>
                <div class="model-container">
                    <div id="output">
                        <span>Model Output</span>
                        <span class="output-text"></span>
                    </div>
                    <div class="text-center">
                        <input name="" id="run-model" class="std-button" type="button" value="Run Model">
                    </div>
                </div>
            </figure>
        </article>
        @Html.Partial("_Comments", Model.CommentModel)
    </div>
</main>


<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/styles/default.min.css">
@Styles.Render("~/Content/toastr.css")
@Styles.Render("~/Content/table.css")

<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.13.1/highlight.min.js"></script>
<script>
    var connectionId = "";
    var outputMessage = "</br>";
    var batch = 0;
    hljs.initHighlightingOnLoad();
</script>
@section scripts {
    @Scripts.Render("~/Scripts/jquery.signalR-2.4.0.min.js")
    <script src="/signalr/hubs" type="text/javascript"></script>
    @Scripts.Render("~/Scripts/js/toastr.min.js")
    @Scripts.Render("~/Scripts/messaging.js")
    @Scripts.Render("~/Scripts/ann-blog-post.js")
    @Scripts.Render("~/Scripts/code-block.js")
    @Scripts.Render("~/Scripts/comments.js")
}

@Scripts.Render("~/Scripts/ann.js")
@Scripts.Render("~/Scripts/code-block.js")
@Scripts.Render("~/Scripts/table.js")